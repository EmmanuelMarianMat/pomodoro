{"version":3,"sources":["components/Button/Button.styles.js","components/Button/index.js","components/Timer/Timer.styles.js","components/Form/Form.styles.js","components/Form/index.js","components/TasksBar/TasksBar.styles.js","components/TasksBar/index.js","components/Timer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","button","Button","text","callback","type","onClick","div","Time","ButtonWrapper","Space","FormWrap","form","Form","inputText","setInputText","tasks","setTasks","pomodoros","setPomodoros","className","value","onChange","e","target","required","min","preventDefault","task","estimate","parseInt","currentPomos","Table","table","TasksMenu","currentTask","isRunning","sessionBreak","setCurrentTask","map","element","index","array","i","length","push","isbreak","count","t","MyTimer","expiryTimestamp","useState","console","log","alert","clone","time","Date","setSeconds","getSeconds","restart","pause","useTimer","autoStart","onExpire","seconds","minutes","resume","currentTaskIsMinusOne","slice","window","confirm","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0aee066e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.button`\r\n  width: 19%;\r\n  min-width: 90px;\r\n  height: 40px;\r\n  border-radius: 30px;\r\n  color: #282c34;\r\n  border: 0;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin-left: 20px;\r\n  font-family: \"Roboto\", sans-serif;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from 'react';\r\n// Styles\r\nimport { Wrapper } from './Button.styles';\r\n\r\nconst Button = ({ text, callback }) => (\r\n  <Wrapper type='button' onClick={callback}>\r\n    {text}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Button;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    text-align: 'center';\r\n`;\r\n\r\nexport const Time = styled.div`\r\n    font-size: 100px;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: space-between;\r\n    width: 270px;\r\n    padding: 10px 0;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Space = styled.div`\r\n    margin-bottom: 30px;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 70px;\r\n  background: transparent;\r\n  padding: 0 40px;\r\n`;\r\n\r\nexport const FormWrap = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0 auto;\r\n  input{\r\n      border-radius:40px;\r\n      height: 40px;\r\n      font-size: 80%;\r\n      text-align: center;\r\n      background: #eee;\r\n      margin-left: 20px;\r\n      margin-right: 40px;\r\n      margin-top: 23px;\r\n      :focus {\r\n        outline: none;\r\n      }\r\n  }\r\n\r\n  h6{\r\n    font-size: 50%;\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  h5{\r\n    font-size: 80%;\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  .number{\r\n    width: 60px;\r\n    font-size: 90%;\r\n    font-weight: 500;\r\n    text-align: center;\r\n  }\r\n\r\n  button{\r\n    border-radius:50%;\r\n    margin-top: 25px;\r\n    margin-left: 40px;\r\n    height: 45px;\r\n    width: 45px;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Space = styled.div`\r\n    margin-bottom: 10px;\r\n`;","import { Wrapper, FormWrap } from \"./Form.styles\";\r\nexport const Form = ({inputText, setInputText, tasks, setTasks, pomodoros, setPomodoros}) => {\r\n    const inputHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n    const inputHandlerII = (e) => {\r\n        setPomodoros(e.target.value);\r\n    };\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (inputText!==\"\")\r\n            setTasks([...tasks,{task:inputText, estimate:parseInt(pomodoros), currentPomos:0/*, key:Math.floor(Math.random() * 1000000)*/}]);\r\n        setInputText(\"\");\r\n        setPomodoros(1);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <FormWrap>\r\n                <h5 className=\"one-liner\">Task</h5>\r\n                <input value={inputText} onChange = {inputHandler} type = \"text\" className=\"todo-ip\" required/>\r\n                <h6>Number of<br/>pomodoros</h6>\r\n                <input value={pomodoros} className=\"number\" type=\"number\" min=\"1\" onChange={inputHandlerII}/>\r\n                <button onClick={submitHandler} className=\"todo-btn\" type=\"submit\">\r\n                    +\r\n                </button>\r\n            </FormWrap>\r\n            \r\n        </Wrapper>\r\n    );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Space = styled.div`\r\n    margin-bottom: 100px;\r\n`;\r\n\r\nexport const Table = styled.table`\r\n    width: 1080px;\r\n    display: block:\r\n    position: absolute;\r\n    thead{\r\n        background: #96A4A6;\r\n        border-radius: 40px;\r\n        color: #282c34;\r\n        font-size: 20px;\r\n    }\r\n\r\n    td{\r\n        min-width: 100px;\r\n        margin-left: 40px;\r\n        margin-right: 40px;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .special{\r\n        border-width: medium;\r\n        border-color: white;\r\n    }\r\n`;","\r\nimport { Space, Table } from \"./TasksBar.styles\";\r\nimport Button from \"../Button\";\r\n\r\nexport const TasksMenu = ({ tasks, setTasks, isRunning, sessionBreak, currentTask, setCurrentTask }) => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Current Tasks</h1>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task to do</th>\r\n                        <th>Completed Pomo</th>\r\n                        <th>Estimate Pomo</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        tasks.map((element, index) => {\r\n                            return (\r\n                                <tr className>\r\n                                    <td>{element['task']}</td>\r\n                                    <td>{element['currentPomos']}</td>\r\n                                    <td>{element['estimate']}</td>\r\n                                    <Button text=\"Select Task\" callback={() => {\r\n                                        setCurrentTask(index);\r\n                                    }} />\r\n                                    <Button text=\"Delete Task\" callback={() => {\r\n                                        let array = [];\r\n                                        for (let i = 0; i < tasks.length; i++) {\r\n                                            if(i!==index)\r\n                                                array.push(tasks[i])\r\n                                        }\r\n                                        if(currentTask===index){\r\n                                            setCurrentTask(-1);\r\n                                        }\r\n                                        setTasks(array);\r\n                                    }} />\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n\r\n            </Table>\r\n            <Space />\r\n        </div>\r\n    );\r\n};","import { useTimer } from 'react-timer-hook';\r\nimport Button from '../Button';\r\nimport { Wrapper, Time, ButtonWrapper, Space } from './Timer.styles';\r\nimport { Form } from '../Form'\r\nimport { TasksMenu } from '../TasksBar'\r\nimport React, { useState } from 'react';\r\n\r\nlet isbreak = false, count = 0, t = 25 * 60;\r\n\r\nfunction MyTimer({ expiryTimestamp }) {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [pomodoros, setPomodoros] = useState(1);\r\n  const [currentTask, setCurrentTask] = useState(-1);\r\n  console.log(currentTask);\r\n  const sessionBreak = () => {\r\n    if (isbreak) {\r\n      alert('Break is over.. Grind time');\r\n      t = 25 * 60;\r\n    }\r\n    else if ((count + 1) % 4 === 0) {\r\n      alert('Good job! Take a 30 min break');\r\n      t = 30 * 60;\r\n      count += 1;\r\n    }\r\n    else {\r\n      alert('Take a 5 minute break!');\r\n      t = 5 * 60;\r\n      count += 1;\r\n    }\r\n    t = t / 100;\r\n    if (!isbreak && currentTask > -1) {\r\n      let clone = [...tasks]\r\n      clone[currentTask]['currentPomos']++;\r\n      setTasks(clone);\r\n    }\r\n    isbreak = !isbreak;\r\n    const time = new Date();\r\n    time.setSeconds(time.getSeconds() + t);\r\n    restart(time);\r\n    pause();\r\n  };\r\n  const { seconds, minutes, isRunning, pause, resume, restart, } = useTimer(\r\n    {\r\n      expiryTimestamp, autoStart: false, onExpire: sessionBreak\r\n    });\r\n\r\n  const currentTaskIsMinusOne = (currentTask === -1);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {currentTaskIsMinusOne ? <h1>Pomodoro</h1> : <h1>Pomodoro - {tasks[currentTask]['task']}</h1>}\r\n      <Time>\r\n        <span>{('0' + minutes).slice(-2)}</span>:<span>{('0' + seconds).slice(-2)}</span>\r\n      </Time>\r\n\r\n      <ButtonWrapper>\r\n        {isRunning ? <Button text=\"Stop\" callback={pause} /> : <Button text=\"Start\" callback={resume} />}\r\n        {isRunning ?\r\n          <Button text=\"Skip\" callback={() => {\r\n            if (window.confirm('Are you sure you want to skip the session?')) {\r\n              sessionBreak();\r\n            }\r\n          }} /> : console.log('whatever')\r\n        }\r\n      </ButtonWrapper>\r\n      <Space />\r\n      <Form inputText={inputText} setInputText={setInputText} tasks={tasks} setTasks={setTasks} pomodoros={pomodoros} setPomodoros={setPomodoros} />\r\n      <TasksMenu tasks={tasks} setTasks={setTasks} isRunning={isRunning} sessionBreak={sessionBreak} currentTask={currentTask} setCurrentTask={setCurrentTask} />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default MyTimer;","import './App.css';\r\nimport MyTimer from './components/Timer';\r\nfunction App() {\r\n  \r\n  \r\n  const time = new Date();\r\n  time.setSeconds(time.getSeconds()+25*60/100);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <MyTimer expiryTimestamp={time}/>\r\n      </header>\r\n    </div>\r\n  );\r\n  }\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}